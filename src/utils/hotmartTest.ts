// üîß FUN√á√ïES DE TESTE PARA API HOTMART
// Use estas fun√ß√µes para testar a integra√ß√£o

import { verifyHotmartPurchase } from './hotmartApi';
import { HOTMART_CONFIG, validateHotmartConfig } from '../config/hotmart';

// üîß FUN√á√ÉO PARA TESTAR CONFIGURA√á√ÉO
export const debugEnvironmentVariables = (): void => {
  console.log('üîß Debug das vari√°veis de ambiente:');
  console.log({
    // Mostra apenas se existem, n√£o os valores
    CLIENT_ID_exists: !!HOTMART_CONFIG.CLIENT_ID,
    CLIENT_SECRET_exists: !!HOTMART_CONFIG.CLIENT_SECRET,
    BASIC_TOKEN_exists: !!HOTMART_CONFIG.BASIC_TOKEN,
    PRODUCT_ID_exists: !!HOTMART_CONFIG.PRODUCT_ID,
    
    // Mostra os primeiros caracteres para debug
    CLIENT_ID_preview: HOTMART_CONFIG.CLIENT_ID ? HOTMART_CONFIG.CLIENT_ID.substring(0, 8) + '...' : 'n√£o encontrado',
    
    // Vari√°veis dispon√≠veis
    available_env_vars: Object.keys(import.meta.env).filter(key => 
      key.includes('HOTMART') || key.includes('PRODUCT')
    )
  });
};

export const testHotmartConfig = (): void => {
  console.log('üîß Testando configura√ß√£o da Hotmart...');
  
  // Debug das vari√°veis de ambiente
  debugEnvironmentVariables();
  
  console.log('Configura√ß√£o atual:', {
    CLIENT_ID: HOTMART_CONFIG.CLIENT_ID?.substring(0, 10) + '...',
    CLIENT_SECRET: HOTMART_CONFIG.CLIENT_SECRET ? '***configurado***' : '‚ùå n√£o configurado',
    BASIC_TOKEN: HOTMART_CONFIG.BASIC_TOKEN ? '***configurado***' : '‚ùå n√£o configurado',
    PRODUCT_ID: HOTMART_CONFIG.PRODUCT_ID || '(qualquer produto)',
    API_BASE_URL: HOTMART_CONFIG.API_BASE_URL
  });
  
  const isValid = validateHotmartConfig();
  console.log('Configura√ß√£o v√°lida:', isValid ? '‚úÖ' : '‚ùå');
  
  if (!isValid) {
    console.log('‚ùå Verifique se os GitHub Secrets est√£o configurados corretamente');
    console.log('Secrets necess√°rios:');
    console.log('- YOUR_HOTMART_CLIENT_ID');
    console.log('- YOUR_HOTMART_CLIENT_SECRET'); 
    console.log('- YOUR_HOTMART_BASIC_TOKEN');
    console.log('- YOUR_PRODUCT_ID (opcional)');
  }
};

// üîß FUN√á√ÉO PARA TESTAR BUSCA POR EMAIL
export const testEmailSearch = async (email: string): Promise<void> => {
  console.log(`üîß Testando busca por email: ${email}`);
  
  try {
    const hasValidPurchase = await verifyHotmartPurchase(email);
    console.log('Resultado:', hasValidPurchase ? '‚úÖ Compra encontrada' : '‚ùå Compra n√£o encontrada');
  } catch (error) {
    console.error('‚ùå Erro no teste:', error);
  }
};

// üîß FUN√á√ÉO PARA TESTAR M√öLTIPLOS EMAILS
export const testMultipleEmails = async (emails: string[]): Promise<void> => {
  console.log('üîß Testando m√∫ltiplos emails...');
  
  for (const email of emails) {
    await testEmailSearch(email);
    // Delay entre testes para evitar rate limiting
    await new Promise(resolve => setTimeout(resolve, 1000));
  }
};

// üîß FUN√á√ÉO PARA EXECUTAR TODOS OS TESTES
export const runAllTests = async (): Promise<void> => {
  console.log('üîß Executando todos os testes da Hotmart...');
  
  // Teste 1: Configura√ß√£o
  testHotmartConfig();
  
  // Teste 2: Emails de exemplo
  const testEmails = [
    'teste@teacherpoli.com',
    'admin@teacherpoli.com',
    'email-real-de-comprador@exemplo.com' // Substitua por um email real
  ];
  
  await testMultipleEmails(testEmails);
  
  console.log('üîß Testes conclu√≠dos!');
};

// üîß EXECUTAR TESTES AUTOMATICAMENTE EM DESENVOLVIMENTO
if (import.meta.env.DEV) {
  // Descomente a linha abaixo para executar testes automaticamente
  // runAllTests();
}