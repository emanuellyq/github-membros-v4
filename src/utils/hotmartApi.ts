import { HOTMART_CONFIG, ACCEPTED_STATUSES, validateHotmartConfig, getDefaultHeaders, getBasicAuthHeaders } from '../config/hotmart';

// üîß CONFIGURA√á√ÉO DA API DA HOTMART
// Este arquivo cont√©m as fun√ß√µes para integra√ß√£o com a Hotmart seguindo a documenta√ß√£o oficial

interface UserCredentials {
  email: string;
  password: string;
  name: string;
  createdAt: Date;
}

interface HotmartTransaction {
  transaction: {
    id: string;
    status: string;
    approved_date?: string;
  };
  buyer: {
    email: string;
    name: string;
  };
  product: {
    id: string;
    name: string;
    ucode?: string;
  };
  purchase: {
    price: {
      value: number;
      currency_code: string;
    };
  };
}

interface HotmartSalesHistoryResponse {
  items: HotmartTransaction[];
  page_info: {
    number: number;
    size: number;
    total_elements: number;
    total_pages: number;
    has_next_page: boolean;
    has_previous_page: boolean;
  };
}

// üîß FUN√á√ÉO PARA OBTER TOKEN DE ACESSO DA HOTMART (OAuth2)
const getHotmartAccessToken = async (): Promise<string | null> => {
  try {
    // üîß EM DESENVOLVIMENTO, RETORNAR TOKEN FAKE SE N√ÉO HOUVER CREDENCIAIS
    if (import.meta.env.DEV && !HOTMART_CONFIG.CLIENT_ID) {
      console.warn('üîß MODO DESENVOLVIMENTO: Usando token fake');
      return 'fake-token-for-development';
    }
    
    // Validar configura√ß√£o antes de fazer a requisi√ß√£o
    if (!validateHotmartConfig()) {
      console.error('‚ùå Configura√ß√£o da Hotmart inv√°lida');
      return null;
    }

    console.log('üîß Solicitando token de acesso da Hotmart...');
    
    // Preparar dados do formul√°rio conforme documenta√ß√£o
    const formData = new URLSearchParams();
    formData.append('grant_type', 'client_credentials');
    formData.append('client_id', HOTMART_CONFIG.CLIENT_ID);
    formData.append('client_secret', HOTMART_CONFIG.CLIENT_SECRET);

    const response = await fetch(`${HOTMART_CONFIG.OAUTH_URL}/security/oauth/token`, {
      method: 'POST',
      headers: getBasicAuthHeaders(),
      body: formData
    });

    if (!response.ok) {
      const errorText = await response.text();
      console.error('‚ùå Falha na requisi√ß√£o do token:', response.status, errorText);
      throw new Error(`Failed to get access token: ${response.status} - ${errorText}`);
    }

    const data = await response.json();
    console.log('‚úÖ Token de acesso obtido com sucesso');
    return data.access_token;
  } catch (error) {
    console.error('‚ùå Erro ao obter token de acesso da Hotmart:', error);
    return null;
  }
};

// üîß FUN√á√ÉO PARA BUSCAR HIST√ìRICO DE VENDAS (conforme documenta√ß√£o)
const fetchSalesHistory = async (
  accessToken: string, 
  page: number = 1,
  buyerEmail?: string
): Promise<HotmartSalesHistoryResponse | null> => {
  try {
    console.log(`üîß Buscando hist√≥rico de vendas (p√°gina ${page})...`);
    
    // Construir par√¢metros da query conforme documenta√ß√£o
    const params = new URLSearchParams({
      'transaction_status': HOTMART_CONFIG.DEFAULT_TRANSACTION_STATUS,
      'max_results': HOTMART_CONFIG.MAX_RESULTS_PER_PAGE.toString(),
      'page': page.toString()
    });
    
    // Adicionar filtro por produto se especificado
    if (HOTMART_CONFIG.PRODUCT_ID) {
      params.append('product_id', HOTMART_CONFIG.PRODUCT_ID);
    }
    
    // Adicionar filtro por email se especificado
    if (buyerEmail) {
      params.append('buyer_email', buyerEmail);
    }
    
    // Adicionar per√≠odo (√∫ltimos 90 dias para otimizar)
    const endDate = new Date();
    const startDate = new Date();
    startDate.setDate(startDate.getDate() - 90);
    
    params.append('start_date', startDate.toISOString().split('T')[0]);
    params.append('end_date', endDate.toISOString().split('T')[0]);
    
    const url = `${HOTMART_CONFIG.API_BASE_URL}/payments/api/v1/sales/history?${params.toString()}`;
    console.log('üîß URL da requisi√ß√£o:', url.replace(accessToken, '***TOKEN***'));
    
    const response = await fetch(url, {
      method: 'GET',
      headers: getDefaultHeaders(accessToken)
    });

    if (!response.ok) {
      const errorText = await response.text();
      console.error('‚ùå Erro na API da Hotmart:', response.status, errorText);
      
      // Se for erro 401, o token pode ter expirado
      if (response.status === 401) {
        console.log('üîß Token pode ter expirado, tentando renovar...');
        return null;
      }
      
      throw new Error(`Failed to fetch sales history: ${response.status} - ${errorText}`);
    }

    const data: HotmartSalesHistoryResponse = await response.json();
    console.log(`‚úÖ Hist√≥rico obtido - ${data.items?.length || 0} transa√ß√µes encontradas`);
    
    return data;
  } catch (error) {
    console.error('‚ùå Erro ao buscar hist√≥rico de vendas:', error);
    return null;
  }
};

// üîß FUN√á√ÉO OTIMIZADA PARA BUSCAR COMPRAS POR EMAIL
const searchPurchasesByEmail = async (email: string): Promise<HotmartTransaction[]> => {
  try {
    console.log(`üîß Buscando compras para o email: ${email}`);
    
    const accessToken = await getHotmartAccessToken();
    if (!accessToken) {
      throw new Error('N√£o foi poss√≠vel obter token de acesso');
    }

    // Primeira tentativa: buscar diretamente com filtro de email
    console.log('üîß Tentativa 1: Busca direta com filtro de email');
    let salesData = await fetchSalesHistory(accessToken, 1, email);
    
    if (salesData && salesData.items.length > 0) {
      console.log(`‚úÖ Encontradas ${salesData.items.length} transa√ß√µes com filtro direto`);
      return salesData.items.filter(item => 
        item.buyer.email.toLowerCase() === email.toLowerCase() &&
        ACCEPTED_STATUSES.includes(item.transaction.status)
      );
    }

    // Segunda tentativa: buscar sem filtro e filtrar localmente (fallback)
    console.log('üîß Tentativa 2: Busca geral e filtro local');
    let allTransactions: HotmartTransaction[] = [];
    let page = 1;
    let hasMore = true;
    const maxPages = 5; // Limitar para evitar muitas requisi√ß√µes
    
    while (hasMore && page <= maxPages) {
      salesData = await fetchSalesHistory(accessToken, page);
      
      if (!salesData) {
        console.log('‚ùå Falha ao obter dados de vendas');
        break;
      }
      
      allTransactions = allTransactions.concat(salesData.items || []);
      hasMore = salesData.page_info?.has_next_page || false;
      page++;
      
      // Delay entre requisi√ß√µes para evitar rate limiting
      if (hasMore) {
        await new Promise(resolve => setTimeout(resolve, 500));
      }
    }
    
    console.log(`üîß Total de transa√ß√µes obtidas: ${allTransactions.length}`);
    
    // Filtrar por email e status
    const userTransactions = allTransactions.filter(transaction => {
      const emailMatch = transaction.buyer.email.toLowerCase() === email.toLowerCase();
      const statusMatch = ACCEPTED_STATUSES.includes(transaction.transaction.status);
      
      // Verificar produto (se especificado)
      const productMatch = !HOTMART_CONFIG.PRODUCT_ID || 
        transaction.product.id === HOTMART_CONFIG.PRODUCT_ID ||
        transaction.product.ucode === HOTMART_CONFIG.PRODUCT_ID;
      
      return emailMatch && statusMatch && productMatch;
    });
    
    console.log(`‚úÖ Encontradas ${userTransactions.length} transa√ß√µes v√°lidas para ${email}`);
    return userTransactions;
    
  } catch (error) {
    console.error('‚ùå Erro ao buscar compras por email:', error);
    return [];
  }
};

// üîß FUN√á√ÉO PRINCIPAL PARA VERIFICAR COMPRA NA HOTMART
export const verifyHotmartPurchase = async (email: string): Promise<boolean> => {
  try {
    console.log(`üîß Verificando compra para: ${email}`);
    
    // üîß E-MAILS DE TESTE - SEMPRE APROVADOS
    const testEmails = [
      'teste@teacherpoli.com',
      'demo@teacherpoli.com',
      'admin@teacherpoli.com',
      'test@test.com',
      'usuario@teste.com',
      'manu@teacherpoli.com',
      'poli@teacherpoli.com'
    ];
    
    if (testEmails.includes(email.toLowerCase())) {
      console.log('‚úÖ Email de teste aprovado automaticamente');
      return true;
    }

    // Verificar na API da Hotmart
    const transactions = await searchPurchasesByEmail(email);
    
    if (transactions.length > 0) {
      console.log('‚úÖ Compra v√°lida encontrada na Hotmart');
      
      // Log das transa√ß√µes encontradas (sem dados sens√≠veis)
      transactions.forEach(transaction => {
        console.log(`üìã Transa√ß√£o: ${transaction.transaction.id} - Status: ${transaction.transaction.status} - Produto: ${transaction.product.name}`);
      });
      
      return true;
    }

    console.log('‚ùå Nenhuma compra v√°lida encontrada');
    return false;

  } catch (error) {
    console.error('‚ùå Erro ao verificar compra na Hotmart:', error);
    
    // Em caso de erro, permitir acesso para emails de teste
    const testEmails = [
      'teste@teacherpoli.com',
      'demo@teacherpoli.com',
      'admin@teacherpoli.com'
    ];
    
    if (testEmails.includes(email.toLowerCase())) {
      console.log('‚ö†Ô∏è Erro na API, mas email de teste aprovado');
      return true;
    }
    
    return false;
  }
};

// üîß FUN√á√ÉO PARA SALVAR CREDENCIAIS DO USU√ÅRIO
export const saveUserCredentials = async (credentials: UserCredentials): Promise<boolean> => {
  try {
    console.log(`üîß Salvando credenciais para: ${credentials.email}`);
    
    // üîß E-MAILS DE TESTE - SEMPRE RETORNAR SUCESSO
    const testEmails = [
      'teste@teacherpoli.com',
      'demo@teacherpoli.com',
      'admin@teacherpoli.com',
      'test@test.com', 
      'usuario@teste.com',
      'manu@teacherpoli.com',
      'poli@teacherpoli.com'
    ];
    
    if (testEmails.includes(credentials.email.toLowerCase())) {
      console.log('‚úÖ Credenciais de teste salvas com sucesso');
      return true;
    }

    // üîß IMPLEMENTA√á√ÉO REAL - SALVAR NO BACKEND
    // Aqui voc√™ implementaria a chamada para seu backend
    /*
    const response = await fetch('/api/users/create', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        email: credentials.email,
        password: credentials.password, // Hash this password!
        name: credentials.name,
        createdAt: credentials.createdAt
      }),
    });

    return response.ok;
    */
    
    // Por enquanto, simular sucesso
    console.log('‚úÖ Credenciais salvas (simulado)');
    return true;
  } catch (error) {
    console.error('‚ùå Erro ao salvar credenciais:', error);
    return false;
  }
};

// üîß FUN√á√ÉO PARA VALIDAR LOGIN
export const validateUserLogin = async (email: string, password: string): Promise<boolean> => {
  try {
    console.log(`üîß Validando login para: ${email}`);
    
    // üîß E-MAILS DE TESTE - ACEITAR QUALQUER SENHA COM MAIS DE 6 CARACTERES
    const testEmails = [
      'teste@teacherpoli.com',
      'demo@teacherpoli.com',
      'admin@teacherpoli.com', 
      'test@test.com',
      'usuario@teste.com',
      'manu@teacherpoli.com',
      'poli@teacherpoli.com'
    ];
    
    if (testEmails.includes(email.toLowerCase()) && password.length >= 6) {
      console.log('‚úÖ Login de teste validado com sucesso');
      return true;
    }

    // üîß IMPLEMENTA√á√ÉO REAL - VALIDAR NO BACKEND
    // Aqui voc√™ implementaria a chamada para seu backend
    /*
    const response = await fetch('/api/users/login', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        email: email,
        password: password
      }),
    });

    return response.ok;
    */
    
    // Por enquanto, simular valida√ß√£o baseada na verifica√ß√£o da compra
    const hasValidPurchase = await verifyHotmartPurchase(email);
    if (hasValidPurchase && password.length >= 6) {
      console.log('‚úÖ Login validado com base na compra da Hotmart');
      return true;
    }
    
    console.log('‚ùå Login inv√°lido');
    return false;
  } catch (error) {
    console.error('‚ùå Erro ao validar login:', error);
    return false;
  }
};

// üîß FUN√á√ÉO PARA SINCRONIZAR COMPRAS HIST√ìRICAS
export const syncHistoricalPurchases = async (): Promise<void> => {
  try {
    console.log('üîß Iniciando sincroniza√ß√£o de compras hist√≥ricas...');
    
    const accessToken = await getHotmartAccessToken();
    if (!accessToken) {
      throw new Error('N√£o foi poss√≠vel obter token de acesso');
    }

    let page = 1;
    let hasMorePages = true;
    let totalSynced = 0;
    
    while (hasMorePages && page <= 50) { // Limite de seguran√ßa
      const salesData = await fetchSalesHistory(accessToken, page);
      
      if (!salesData) {
        console.log('‚ùå Falha ao obter dados de vendas');
        break;
      }
      
      // Processar cada transa√ß√£o
      for (const transaction of salesData.items || []) {
        if (ACCEPTED_STATUSES.includes(transaction.transaction.status)) {
          // Aqui voc√™ salvaria no seu banco de dados
          console.log(`üìã Processando: ${transaction.buyer.email} - ${transaction.product.name}`);
          totalSynced++;
        }
      }
      
      hasMorePages = salesData.page_info?.has_next_page || false;
      page++;
      
      // Delay para evitar rate limiting
      await new Promise(resolve => setTimeout(resolve, 1000));
    }
    
    console.log(`‚úÖ Sincroniza√ß√£o conclu√≠da - ${totalSynced} compras processadas`);
  } catch (error) {
    console.error('‚ùå Erro na sincroniza√ß√£o de compras hist√≥ricas:', error);
  }
};

/* 
üîß RESUMO DAS MELHORIAS IMPLEMENTADAS:

1. ‚úÖ Configura√ß√£o correta dos nomes dos secrets do GitHub
2. ‚úÖ Implementa√ß√£o da autentica√ß√£o OAuth2 conforme documenta√ß√£o
3. ‚úÖ Uso correto do endpoint de hist√≥rico de vendas
4. ‚úÖ Filtros otimizados por email e produto
5. ‚úÖ Tratamento de erros robusto
6. ‚úÖ Rate limiting para evitar bloqueios
7. ‚úÖ Logs detalhados para debug
8. ‚úÖ Fallback para busca local quando necess√°rio

üîß PR√ìXIMOS PASSOS:
1. Testar com credenciais reais no ambiente de produ√ß√£o
2. Implementar cache para reduzir chamadas √† API
3. Adicionar webhook para sincroniza√ß√£o em tempo real
4. Implementar banco de dados para armazenar compras localmente
*/